# -*- coding: utf-8 -*-
"""python_assessment_12/09/23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LaZOLtKaqxKlSXsO3Yt28XK7GmbL5h2U
"""

question1

A) "Invalid input

question 2

A) "Error: Not a positive integer"

question 3

A) "Result: Infinity"

question 4

B) [1, 4, 9, 16, 25]

question 5
A) 2

question 6
A) {1, 2, 3, 5, 6, 7, 9, 10}

question 7
B) 20

question 8
A) "!dlroW ,olleH"

question 9
B) 3

question 10
D) ValueError

question 11
B) 15

question 12
B) TypeError

question 13
A) 5.0 Done

question 14
B) 5

question 15
A) [1, 2, 3, 4]

question 16
B) [2, 4]

question 17
A) Hello Alice

question 18
B) 11

question 19
C) 120

question 20
B) 3

question 21
A) True

question 22
B) "HELLO, ALICE"

question 23
A) "Time taken: 2.0 seconds"

question 24
A) "Arguments: 3, 4, Result: 7"

question 25
B) 55

question 26
A) "Admin panel accessed."

question 27
B) "Attempt 1: Operation failed"

"""CODING

6.Maximum Subarray SumExample:

python
n = 9
arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
result = max_subarray_sum(arr, n)
print(result)  # This should output 6, which is the maximum sum of [4, -1, 2, 1].


Note:

In the example provided, the maximum sum is obtained by selecting the subarray [4, -1, 2, 1], which gives a sum of 6.
"""

def max_subarray_sum(n,arr):
  max=0
  current=0
  i=0
  while i < n:
    if current<0:
      current=0
    current=current+arr[i]
    if current> max:
      max=current
    i=i+1
  return max




n= int(input())
arr=[]
for i in range(n):
  arr.append(int(input()))
result=max_subarray_sum(n,arr)
print(result)

"""1.Problem Statement: Employee Performance Evaluation"""

def calculate_performance_scores(employees):
    result = []

    for employee in employees:
        name = employee["name"]
        scores = employee["scores"]
        weights = employee["weights"]


        weighted_scores = {x: scores[x] * weights[x] for x in scores}
        performance_score = sum(weighted_scores.values())
        employee_performance = {
            "name": name,
            "performance_score": performance_score
        }

        result.append(employee_performance)

    return result

employees = [
    {
        "name": "John",
        "scores": {
            "Quality of Work": 90,
            "Team Collaboration": 80
        },
        "weights": {
            "Quality of Work": 0.6,
            "Team Collaboration": 0.4
        }
    },
    {
        "name": "Alice",
        "scores": {
            "Quality of Work": 85,
            "Team Collaboration": 95
        },
        "weights": {
            "Quality of Work": 0.5,
            "Team Collaboration": 0.5
        }
    }
]

performance_scores = calculate_performance_scores(employees)
for employee in performance_scores:
    print(f"{employee['name']}: Performance Score = {employee['performance_score']}")

"""5.Circular Picnic Game

"""

def circular_maximum_sum(n, numbers):
    max_end = max_so_far = numbers[0]
    min_end = min_so_far = numbers[0]
    total_sum = numbers[0]


    for i in range(1, n):
        num = numbers[i]
        max_end = max(num, max_end + num)
        min_end = min(num, min_end + num)
        max_so_far = max(max_so_far, max_end)
        total_sum += num
    if max_so_far < 0:
        return max_so_far
    else:
        return max(max_so_far, total_sum - min_so_far)


n = 5
numbers = [10, -4, 1, 3, 3]
result = circular_maximum_sum(n, numbers)
print(result)

"""7.Longest Common Subsequence"""

def longest_sub(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[m][n]

s1 = "AGGTAB"
s2 = "GXTXAYB"
result = longest_sub(s1, s2)
print(result)

"""8.Matrix Spiral Order"""

def spiral_order(matrix):
    result = []

    while matrix:
        result += matrix.pop(0)
        if matrix and matrix[0]:
            for row in matrix:
                result.append(row.pop())
        if matrix:
            result += matrix.pop()[::-1]
        if matrix and matrix[0]:
            for row in matrix[::-1]:
                result.append(row.pop(0))

    return result


matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
result = spiral_order(matrix)
print(result)

"""3.Problem Statement: Sorting Employee Records"""

def sort_employees_by_id(employees):
    sorted_employees = sorted(employees, key=lambda x: x['id'])
    return sorted_employees

def sort_employees_by_salary(employees):
   sorted_employees = sorted(employees, key=lambda x: x['salary'], reverse=True)
   return sorted_employees


employees = [
    {'id': 3, 'name': 'John', 'salary': 60000},
    {'id': 1, 'name': 'Alice', 'salary': 75000},
    {'id': 2, 'name': 'Bob', 'salary': 80000}
]

sorted_by_id = sort_employees_by_id(employees)
sorted_by_salary = sort_employees_by_salary(employees)

print("Sorted by ID:")
for employee in sorted_by_id:
    print(employee)

print("\nSorted by Salary:")
for employee in sorted_by_salary:
    print(employee)

